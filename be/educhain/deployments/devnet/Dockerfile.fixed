# First stage: build the wasmd binary
FROM golang:1.21 AS builder

# Install required tools and dependencies
RUN apt-get update && apt-get install -y \
    make \
    git \
    gcc \
    build-essential \
    libusb-1.0-0-dev \
    pkg-config \
    curl \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Clone a CosmWasm-integrated chain like wasmd or your forked chain
RUN git clone https://github.com/CosmWasm/wasmd.git .
RUN git checkout v0.50.0  # Choose appropriate CosmWasm-supported version

# Apply the patch if it exists
# COPY wasmd.patch /tmp/wasmd.patch
RUN if [ -f /tmp/wasmd.patch ]; then git apply /tmp/wasmd.patch || echo "Patch may have already been applied or doesn't apply cleanly"; fi

# Detect architecture and download the appropriate libwasmvm library
RUN ARCH=$(dpkg --print-architecture) && \
    export WASMVM_VERSION=$(go list -m github.com/CosmWasm/wasmvm | cut -d ' ' -f 2) && \
    if [ "$ARCH" = "arm64" ]; then \
        echo "Architecture: ARM64, WASMVM_VERSION: $WASMVM_VERSION" && \
        curl -L "https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm.aarch64.so" -o /usr/lib/libwasmvm.so && \
        # Create a symlink with the architecture-specific name the binary expects
        ln -s /usr/lib/libwasmvm.so /usr/lib/libwasmvm.aarch64.so; \
    else \
        echo "Architecture: AMD64, WASMVM_VERSION: $WASMVM_VERSION" && \
        curl -L "https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION/libwasmvm.x86_64.so" -o /usr/lib/libwasmvm.so && \
        # Create a symlink with the architecture-specific name the binary expects
        ln -s /usr/lib/libwasmvm.so /usr/lib/libwasmvm.x86_64.so; \
    fi

# Build wasmd with proper flags for dynamic linking rather than static linking
# This approach is more reliable for shared libraries on ARM64
RUN CGO_ENABLED=1 go build -tags "netgo,ledger" -o build/wasmd ./cmd/wasmd

# Second stage: create a minimal runtime image
FROM debian:bookworm-slim

# Install necessary runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    bash \
    curl \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Copy wasmvm library from builder
COPY --from=builder /usr/lib/libwasmvm.so /usr/lib/
# Create architecture-specific symlinks
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        ln -s /usr/lib/libwasmvm.so /usr/lib/libwasmvm.aarch64.so; \
    else \
        ln -s /usr/lib/libwasmvm.so /usr/lib/libwasmvm.x86_64.so; \
    fi

# Ensure the binaries can find libraries at runtime
ENV LD_LIBRARY_PATH="/usr/lib"

# Copy wasmd binary
COPY --from=builder /app/build/wasmd /usr/bin/wasmd

# Copy config files if needed
COPY deployments/devnet/config/ /root/.wasmd/config/

# --- Custom: Build and add Go REST API binary ---
# Copy Go REST API source code and build it in a new builder stage
FROM golang:1.21 AS go_builder
WORKDIR /goapp/chain
COPY chain ./
RUN go mod tidy
RUN go build -o /goapp/nodeinfo-rest main.go

# Back to runtime image
FROM debian:bookworm-slim as final

# Install necessary runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    bash \
    curl \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Copy wasmvm library from builder
COPY --from=builder /usr/lib/libwasmvm.so /usr/lib/
COPY --from=builder /usr/bin/wasmd /usr/bin/wasmd
COPY --from=go_builder /goapp/nodeinfo-rest /usr/bin/nodeinfo-rest
COPY deployments/devnet/config/ /root/.wasmd/config/

# Entrypoint script to run both wasmd and REST API
COPY entrypoint_multi.sh /entrypoint_multi.sh
RUN chmod +x /entrypoint_multi.sh
ENTRYPOINT ["/entrypoint_multi.sh"]
