FROM golang:1.19-alpine AS builder

# Install necessary build tools
RUN apk add --no-cache git build-base linux-headers

# Build wasmd from source
WORKDIR /go/src/github.com/CosmWasm/wasmd

# Clone and build in a single layer to reduce image size
RUN git clone --depth 1 --branch v0.40.2 https://github.com/CosmWasm/wasmd.git . && \
    # Clean go cache before build to save space
    go clean -cache -modcache && \
    # Set build flags for wasmd - using static compilation without CGO
    LEDGER_ENABLED=false CGO_ENABLED=0 go build \
      -mod=readonly \
      -tags netgo \
      -ldflags '-w -s -extldflags "-static"' \
      -o /go/bin/wasmd ./cmd/wasmd && \
    # Verify binary was created successfully
    ls -la /go/bin/wasmd

# Final stage - using alpine to minimize size
FROM alpine:3.19

# Install minimal required packages
RUN apk add --no-cache ca-certificates curl jq python3

# Copy the wasmd binary from builder stage
COPY --from=builder /go/bin/wasmd /usr/local/bin/wasmd

# Create directory for wasmd data
WORKDIR /root
RUN mkdir -p /root/.wasmd

# Copy startup script
COPY start_node.sh /root/start_node.sh
RUN chmod +x /root/start_node.sh

# Expose ports
EXPOSE 26656 26657 1317 1318 9090

# Set entrypoint
ENTRYPOINT ["/bin/sh", "-c", "if [ -f /root/start_node.sh ]; then chmod +x /root/start_node.sh && /root/start_node.sh; else echo 'start_node.sh not found, starting wasmd directly...'; wasmd start; fi"]
