FROM golang:1.22-bookworm AS builder

# Install necessary build tools and dependencies for CGO
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    curl \
    make \
    bash \
    jq \
    gcc \
    libc6-dev \
    pkg-config \
    libssl-dev \
    file \
    && rm -rf /var/lib/apt/lists/*

# Set versions explicitly to ensure compatibility with wasmd v0.40.0
ENV WASMD_VERSION=v0.40.0
ENV WASMVM_VERSION=v1.2.4
ENV COSMOS_SDK_VERSION=v0.47.3

# Download pre-built libwasmvm.so instead of building from source
WORKDIR /lib
RUN if [ "$(uname -m)" = "x86_64" ]; then \
        echo "Downloading libwasmvm for x86_64..." && \
        curl -L "https://github.com/CosmWasm/wasmvm/releases/download/${WASMVM_VERSION}/libwasmvm.x86_64.so" -o /lib/libwasmvm.so; \
    else \
        echo "Downloading libwasmvm for aarch64..." && \
        curl -L "https://github.com/CosmWasm/wasmvm/releases/download/${WASMVM_VERSION}/libwasmvm.aarch64.so" -o /lib/libwasmvm.so; \
    fi && \
    chmod +x /lib/libwasmvm.so && \
    mkdir -p /go/pkg/ && \
    cp -a /lib/libwasmvm.so /go/pkg/ && \
    ls -l /lib/libwasmvm.so && \
    file /lib/libwasmvm.so

# Build wasmd from source - version v0.40.0 compatible with wasmvm v1.2.4
WORKDIR /go/src/github.com/CosmWasm/wasmd
RUN git clone --depth 1 --branch ${WASMD_VERSION} https://github.com/CosmWasm/wasmd.git . && \
    # Create a branch to avoid detached HEAD warnings
    git checkout -b build-branch && \
    # Verify wasmvm version in go.mod
    cat go.mod | grep wasmvm && \
    # Make sure wasmvm versions match
    go mod edit -replace github.com/CosmWasm/wasmvm=github.com/CosmWasm/wasmvm@${WASMVM_VERSION} && \
    go mod tidy && \
    # Install dependencies
    go mod download && \
    # Build wasmd binary - for v0.40.0, make build is enough
    make build && \
    cp -a ./build/wasmd /go/bin/ && \
    # Verify the binary
    /go/bin/wasmd version || echo "Version check failed but continuing" && \
    # Check library dependencies
    ldd /go/bin/wasmd | grep wasmvm || echo "No wasmvm in ldd output"

# Final stage
FROM debian:bookworm-slim

# Install minimal required packages
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    jq \
    python3 \
    python3-pip \
    procps \
    wget \
    lsof \
    strace \
    file \
    && rm -rf /var/lib/apt/lists/*

# Install python3-venv for virtual environment support
RUN apt-get update && apt-get install -y python3-venv && rm -rf /var/lib/apt/lists/*

# Create a Python virtual environment and install FastAPI dependencies inside it
RUN python3 -m venv /venv \
    && /venv/bin/pip install --upgrade pip \
    && /venv/bin/pip install --no-cache-dir \
        fastapi==0.109.2 \
        uvicorn==0.27.1 \
        httpx==0.26.0 \
        pydantic==2.6.1 \
        python-dotenv==1.0.1 \
        orjson==3.9.12 \
        pymongo==4.6.1 \
        prometheus-client==0.18.0 \
        asyncio==3.4.3 \
        psutil==5.9.5

# Copy the wasmd binary from builder stage
COPY --from=builder /go/bin/wasmd /usr/local/bin/wasmd

# Copy libwasmvm.so from builder stage and create necessary symlinks
COPY --from=builder /lib/libwasmvm.so /lib/libwasmvm.so
RUN chmod 755 /lib/libwasmvm.so && \
    ln -sf /lib/libwasmvm.so /lib/libwasmvm.aarch64.so && \
    ln -sf /lib/libwasmvm.so /lib/libwasmvm.x86_64.so && \
    # Ensure /lib and /usr/lib are different directories before creating symlink
    if [ "$(readlink -f /lib)" != "$(readlink -f /usr/lib)" ]; then \
        ln -sf /lib/libwasmvm.so /usr/lib/libwasmvm.so; \
    else \
        echo "/lib and /usr/lib are the same directory, skipping symlink"; \
    fi

# Verify wasmd version and library availability
RUN wasmd version || echo "Unable to check version but continuing" && \
    ls -la /lib/libwasmvm* && \
    ldd /usr/local/bin/wasmd || echo "Skipping ldd check" && \
    # Check if binary is linked to the right library
    ldd /usr/local/bin/wasmd | grep wasmvm || echo "No wasmvm in ldd output"

# Set up the library path and environment variables
ENV LD_LIBRARY_PATH=/lib:/usr/lib
ENV DAEMON_NAME=wasmd
ENV DAEMON_HOME=/root/.wasmd
ENV DAEMON_ALLOW_DOWNLOAD_BINARIES=true
ENV DAEMON_RESTART_AFTER_UPGRADE=true

# Create directory for wasmd data
WORKDIR /root
RUN mkdir -p /root/.wasmd && chmod 755 /root/.wasmd

# Set up the chain directory for FastAPI
RUN mkdir -p /chain

# Create log directory for API output
RUN mkdir -p /var/log

# Expose ports
# 26656: P2P port for Tendermint
# 26657: RPC port for Tendermint
# 1317: Cosmos REST API
# 1318: FastAPI Custom REST API
# 9090: gRPC port
EXPOSE 26656 26657 1317 1318 9090

# Note: entrypoint will be provided by docker-compose via volume mount
CMD ["/bin/bash"]
